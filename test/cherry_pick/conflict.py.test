from ghstack.test_prelude import *

init_test()

# Create a commit on a separate branch that will cause a conflict when cherry-picked
git("checkout", "-b", "feature")
commit("A")
(A,) = gh_submit("Initial commit")

# Switch to master and modify the same file differently
git("checkout", "master")
# The commit() function creates <name>.txt with content "A"
# Let's create a conflicting change by committing to the same file
write_file_and_add("A.txt", "Different content")
git("commit", "-m", "Conflicting change")

# Before cherry-pick, verify "Commit A" is not in master
log_before = git("log", "--oneline", "-n", "2")
assert "Commit A" not in log_before
assert "Conflicting change" in log_before

# Attempt to cherry-pick - this should now raise an exception due to conflict
git_status_before = git("status", "--porcelain")
assert git_status_before.strip() == ""  # Clean working directory

try:
    gh_cherry_pick(f"https://github.com/pytorch/pytorch/pull/{A.number}")
    assert False, "Expected cherry-pick to fail with conflict"
except RuntimeError as e:
    # Verify it's a cherry-pick failure
    assert "cherry-pick" in str(e)
    assert "failed with exit code" in str(e)

ok()
