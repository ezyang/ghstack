from ghstack.test_prelude import *

init_test()

# Create a more comprehensive stack test by manually testing the git operations
# First, create a stack of commits on a branch
git("checkout", "-b", "feature")
commit("A")
commit("B")
commit("C")

# Create PRs for the stack
A, B, C = gh_submit("Stack of 3 commits")

# Go back to master and create a divergent commit
git("checkout", "master")
commit("M")

# Before cherry-pick, "Commit C" should NOT be in master history
log_before = git("log", "--oneline", "-n", "2")
assert "Commit C" not in log_before
assert "Commit M" in log_before

# Now test cherry-picking the top commit only (not stack)
gh_cherry_pick(f"https://github.com/pytorch/pytorch/pull/{C.number}")

# After cherry-pick, should only have C and M in recent master history, not A and B
log_output = git("log", "--oneline", "-n", "4")
assert "Commit C" in log_output
assert "Commit M" in log_output
# A and B should not be in recent history (they weren't cherry-picked)
assert "Commit A" not in log_output.split("\n")[0]  # Not the most recent
assert "Commit B" not in log_output.split("\n")[0]  # Not the most recent

ok()
